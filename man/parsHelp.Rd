% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/parsHelp.R
\name{parsHelp}
\alias{parsHelp}
\title{Encryption parameter selection}
\usage{
parsHelp(scheme, ...)
}
\arguments{
\item{scheme}{the scheme for which to get parameter help.  Currently
only Fan and Vercauteren's scheme is supported by specifying \code{"FandV"}.}

\item{...}{pass the specific options for the chosen scheme as named arguments.
See the details section for options for encryption schemes currently implemented.}
}
\description{
Use this function to help choose encryption parameters for your scheme.
}
\details{
This function provides assistance with selecting parameter values for the
encryption scheme you wish to use.

Currently only the scheme of Fan and Vercauteren (\code{"FandV"}) is implemented.

For \code{"FandV"} you may specify:
\describe{
  \item{\code{lambda}}{the security level required (bits), default is 80;}
  \item{\code{max}}{the largest absolute value you will need to store encrypted,
   default is 1000;}
  \item{\code{L}}{the deepest multiplication depth you need to be able to
  evaluate encrypted, default is 4.}
}

The security level in bits relates to the approximate number of operations
which would be required to break the cipher text, i.e. \eqn{O(2^\lambda)}
operations.

Ensuring the depth of multiplication operations you require is based on an
overwhelming probability of being able to correctly decrypt after so many
operations by roughly bounding the possible noise growth.  In most situations
it is very conservative and additional multiplications are possible, so this
should be considered only a lower bound on the number of multiplies required.  If
computational performance is a concern this should be treated only as a good starting
point from which the relevant parameters can be eased off, testing more thoroughly
by simulation.

For the scheme of Fan and Vercauteren (\code{"FandV"}): the security level is
based on the analysis of Lindner and Peikert (2011) which is known to be quite
conservative; and the multiplicative depth bound is based on the analysis of
Lepoint and Naehrig (2014).  If the multiplicative depth lower bound is too
conservative, then for computational performance reduce the qpow parameter from
this recommended starting point.
}
\examples{
# Want 128-bit security with 6 multiplies deep
# to evaluate 7 factorial
p <- parsHelp("FandV", lambda=128, L=6)
keys <- keygen(p)
ct <- enc(keys$pk, 1:7)
dec(keys$sk, prod(ct))
factorial(7)

# But notice this is quite conservative
# This will usually give the right answer too
ct <- enc(keys$pk, 1:8)
dec(keys$sk, prod(ct))
factorial(8)
}
\author{
Louis Aslett
}
\references{
Fan, J., & Vercauteren, F. (2012). Somewhat Practical Fully Homomorphic
Encryption. IACR ePrint. Retrieved from \url{https://eprint.iacr.org/2012/144}

Lepoint, T., & Naehrig, M. (2014). A comparison of the homomorphic encryption
schemes FV and YASHE. In \emph{Progress in Cryptology–AFRICACRYPT 2014}
(pp. 318-335).

Lindner, R., & Peikert, C. (2011). Better key sizes (and attacks) for LWE-based
encryption. In \emph{Topics in Cryptology–CT-RSA 2011} (pp. 319-339).
}
\seealso{
\code{\link{pars}} to manually choose parameters.

\code{\link{keygen}} to generate encryption keys using these parameters.
}

